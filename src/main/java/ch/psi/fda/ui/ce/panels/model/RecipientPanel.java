/*
 *  Copyright (C) 2010 Paul Scherrer Institute
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ShellAction.java
 *
 * Created on Dec 22, 2010, 4:15:13 PM
 */

package ch.psi.fda.ui.ce.panels.model;

import ch.psi.fda.ProcessorFDA;
import ch.psi.fda.model.v1.Recipient;
//import ch.psi.fda.ui.ee.api.ExecutionService;
import ch.psi.fda.ui.ce.panels.ComponentMetadata;
import ch.psi.fda.ui.ce.panels.DocumentAdapter;
import ch.psi.fda.ui.ce.panels.EditableComponent;
import ch.psi.fda.ui.ce.panels.ObjectProvider;
import ch.psi.fda.ui.ce.panels.PanelSupport;
import java.awt.Component;
import java.util.HashMap;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
//import org.openide.util.Lookup;

/**
 *
 * @author ebner
 */
public class RecipientPanel extends javax.swing.JPanel implements ObjectProvider<Recipient>, EditableComponent {

    private boolean modified = false;
    private Recipient recipient;
    /**
     * Panel support
     */
    private PanelSupport panelSupport;

    public RecipientPanel() {
        this(new Recipient());
    }

    /** Creates new form ShellAction */
    public RecipientPanel(Recipient recipient) {
        this.recipient = recipient;

        initComponents();
        
        ProcessorFDA.setIcon(jButton2, getClass().getResource("/ch/psi/fda/ui/ce/icons/plus.png"));        

        HashMap<Component, ComponentMetadata> managedFields = new HashMap<Component,ComponentMetadata>();
        managedFields.put(jTextFieldSms, new ComponentMetadata(true));
        managedFields.put(jCheckBoxError, new ComponentMetadata(false));
        managedFields.put(jCheckBoxSuccess, new ComponentMetadata(false));

        this.panelSupport = new PanelSupport();
        this.panelSupport.analyze(managedFields);

        // Update view
        jTextFieldSms.setText(recipient.getValue());
        jCheckBoxError.setSelected(recipient.isError());
        jCheckBoxSuccess.setSelected(recipient.isSuccess());
        
        // Establish bindings
        jTextFieldSms.getDocument().addDocumentListener(new DocumentAdapter() {
            @Override
            public void valueChange(DocumentEvent de) {
                modified = true;
                String value = panelSupport.getRealFieldValue(jTextFieldSms);
                // Remove spaces
                value = value.replaceAll(" ", "");
                RecipientPanel.this.recipient.setValue(value);
            }
        });

        jCheckBoxError.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
                modified = true;
                RecipientPanel.this.recipient.setError(jCheckBoxError.isSelected());
            }
        });

        jCheckBoxSuccess.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
                modified = true;
                RecipientPanel.this.recipient.setSuccess(jCheckBoxSuccess.isSelected());
            }
        });


        this.panelSupport.manage(this, managedFields, jButton2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldSms = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBoxError = new javax.swing.JCheckBox();
        jCheckBoxSuccess = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();

        jTextFieldSms.setText("SMS, E-Mail");
        jTextFieldSms.setToolTipText("email address or SMS number");
        jTextFieldSms.setPreferredSize(new java.awt.Dimension(200, 28));

        jButton1.setText("Test");
        jButton1.setToolTipText("Send test notification");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBoxError.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jCheckBoxError.setText("Error");
        jCheckBoxError.setName("Error"); // NOI18N

        jCheckBoxSuccess.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jCheckBoxSuccess.setText("Success");
        jCheckBoxSuccess.setName("Success"); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/psi/fda/ui/ce/icons/plus.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTextFieldSms, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSuccess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldSms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton1)
                .addComponent(jCheckBoxSuccess)
                .addComponent(jCheckBoxError)
                .addComponent(jButton2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //ExecutionService service = Lookup.getDefault().lookup(ExecutionService.class);
        //service.testNotification(recipient.getValue());                
        ProcessorFDA cur = ProcessorFDA.getCurrent();
        if  (cur!=null){
            cur.testNotification(recipient.getValue());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBoxError;
    private javax.swing.JCheckBox jCheckBoxSuccess;
    private javax.swing.JTextField jTextFieldSms;
    // End of variables declaration//GEN-END:variables

    @Override
    public Recipient getObject() {
        return recipient;
    }

    @Override
    public boolean modified() {
        boolean m = modified;
        modified = false;
        return m;
    }

    @Override
    public void clearModified() {
        modified = false;
    }
}
