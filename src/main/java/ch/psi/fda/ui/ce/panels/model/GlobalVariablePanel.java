/*
 *  Copyright (C) 2011 Paul Scherrer Institute
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * FunctionPanel.java
 *
 * Created on May 25, 2011, 12:35:20 PM
 */

package ch.psi.fda.ui.ce.panels.model;

import ch.psi.fda.ProcessorFDA;
import ch.psi.fda.model.v1.Variable;
import ch.psi.fda.ui.ce.panels.ComponentMetadata;
import ch.psi.fda.ui.ce.panels.DocumentAdapter;
import ch.psi.fda.ui.ce.panels.EditableComponent;
import ch.psi.fda.ui.ce.panels.ObjectProvider;
import ch.psi.fda.ui.ce.panels.PanelSupport;
import ch.psi.fda.ui.ce.panels.model.util.ModelUtil;
import java.awt.Component;
import java.util.HashMap;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author ebner
 */
public class GlobalVariablePanel extends javax.swing.JPanel implements ObjectProvider<Variable>, EditableComponent {

    private boolean modified = false;
    private Variable variable;
    private PanelSupport panelSupport;

    public GlobalVariablePanel(){
        this(new Variable());
    }

    /** Creates new form FunctionPanel */
    public GlobalVariablePanel(Variable var) {
        this.variable = var;

        initComponents();
        
        ProcessorFDA.setIcon(jButton1, getClass().getResource("/ch/psi/fda/ui/ce/icons/plus.png"));        

        HashMap<Component, ComponentMetadata> managedFields = new HashMap<Component,ComponentMetadata>();
        managedFields.put(jTextFieldName, new ComponentMetadata(true));
        managedFields.put(jTextFieldValue, new ComponentMetadata(true));
        managedFields.put(jTextFieldDescription, new ComponentMetadata(false, ""));

        this.panelSupport = new PanelSupport();
        this.panelSupport.analyze(managedFields);

        jTextFieldName.setText(variable.getName());
        jTextFieldValue.setText(variable.getValue()+"");
        if(variable.getDescription()!=null){
            jTextFieldDescription.setText(variable.getDescription());
        }


        jTextFieldDescription.getDocument().addDocumentListener(new DocumentAdapter() {
            @Override
            public void valueChange(DocumentEvent de) {
                modified = true;
                String s = panelSupport.getRealFieldValue(jTextFieldDescription);
                if(s.trim().equals("")){
                    s=null;
                }
                variable.setDescription(s);
            }
        });
        jTextFieldName.getDocument().addDocumentListener(new DocumentAdapter() {
            @Override
            public void valueChange(DocumentEvent de) {
                modified = true;
                variable.setName(jTextFieldName.getText());
                ModelUtil.getInstance().refreshIds();
            }
        });
        jTextFieldValue.getDocument().addDocumentListener(new DocumentAdapter() {
            @Override
            public void valueChange(DocumentEvent de) {
                modified = true;
                double v = 0;
                try{
                    v = Double.parseDouble(jTextFieldValue.getText());
                }
                catch(NumberFormatException e){
                }
                variable.setValue(v);
            }
        });

        this.panelSupport.manage(this, managedFields, jButton1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldValue = new javax.swing.JTextField();
        jTextFieldDescription = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setLabelFor(jTextFieldName);
        jLabel1.setText("Name:");
        add(jLabel1);

        jTextFieldName.setPreferredSize(new java.awt.Dimension(80, 28));
        add(jTextFieldName);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setLabelFor(jTextFieldValue);
        jLabel2.setText("Value:");
        add(jLabel2);

        jTextFieldValue.setPreferredSize(new java.awt.Dimension(80, 28));
        add(jTextFieldValue);

        jTextFieldDescription.setText("Description");
        jTextFieldDescription.setPreferredSize(new java.awt.Dimension(200, 28));
        add(jTextFieldDescription);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ch/psi/fda/ui/ce/icons/plus.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        add(jButton1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldValue;
    // End of variables declaration//GEN-END:variables

    @Override
    public Variable getObject() {
        return variable;
    }

    @Override
    public boolean modified() {
        boolean m = modified;
        modified = false;
        return m;
    }

    @Override
    public void clearModified() {
        modified = false;
    }

}
